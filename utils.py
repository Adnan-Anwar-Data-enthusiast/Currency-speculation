{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b0c945c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (2.3.2)\n",
      "Requirement already satisfied: pandas in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (2.3.1)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.0 -> 25.2\n",
      "[notice] To update, run: C:\\Users\\Admin\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n",
      "ERROR: Invalid requirement: '#attribute'\n",
      "\n",
      "[notice] A new release of pip is available: 24.0 -> 25.2\n",
      "[notice] To update, run: C:\\Users\\Admin\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (3.10.5)\n",
      "Requirement already satisfied: seaborn in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (0.13.2)\n",
      "Requirement already satisfied: plotly in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (6.2.0)\n",
      "Requirement already satisfied: yfinance in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (0.2.65)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (1.3.3)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (4.59.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: numpy>=1.23 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (2.3.2)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (25.0)\n",
      "Requirement already satisfied: pillow>=8 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (11.3.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: pandas>=1.2 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from seaborn) (2.3.1)\n",
      "Requirement already satisfied: narwhals>=1.15.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from plotly) (2.0.1)\n",
      "Requirement already satisfied: requests>=2.31 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (2.32.4)\n",
      "Requirement already satisfied: multitasking>=0.0.7 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (0.0.12)\n",
      "Requirement already satisfied: platformdirs>=2.0.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (4.3.8)\n",
      "Requirement already satisfied: pytz>=2022.5 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (2025.2)\n",
      "Requirement already satisfied: frozendict>=2.3.4 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (2.4.6)\n",
      "Requirement already satisfied: peewee>=3.16.2 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (3.18.2)\n",
      "Requirement already satisfied: beautifulsoup4>=4.11.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (4.13.4)\n",
      "Requirement already satisfied: curl_cffi>=0.7 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (0.12.0)\n",
      "Requirement already satisfied: protobuf>=3.19.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (6.31.1)\n",
      "Requirement already satisfied: websockets>=13.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from yfinance) (15.0.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from beautifulsoup4>=4.11.1->yfinance) (2.7)\n",
      "Requirement already satisfied: typing-extensions>=4.0.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from beautifulsoup4>=4.11.1->yfinance) (4.14.1)\n",
      "Requirement already satisfied: cffi>=1.12.0 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from curl_cffi>=0.7->yfinance) (1.17.1)\n",
      "Requirement already satisfied: certifi>=2024.2.2 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from curl_cffi>=0.7->yfinance) (2025.8.3)\n",
      "Requirement already satisfied: tzdata>=2022.7 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from pandas>=1.2->seaborn) (2025.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
      "Requirement already satisfied: charset_normalizer<4,>=2 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from requests>=2.31->yfinance) (3.4.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from requests>=2.31->yfinance) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from requests>=2.31->yfinance) (2.5.0)\n",
      "Requirement already satisfied: pycparser in c:\\users\\admin\\appdata\\local\\packages\\pythonsoftwarefoundation.python.3.11_qbz5n2kfra8p0\\localcache\\local-packages\\python311\\site-packages (from cffi>=1.12.0->curl_cffi>=0.7->yfinance) (2.22)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "[notice] A new release of pip is available: 24.0 -> 25.2\n",
      "[notice] To update, run: C:\\Users\\Admin\\AppData\\Local\\Microsoft\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\python.exe -m pip install --upgrade pip\n"
     ]
    }
   ],
   "source": [
    "!pip install numpy pandas\n",
    "!pip install openpyxl #attribute to install excel reading\n",
    "%pip install matplotlib seaborn plotly seaborn yfinance\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "import seaborn as sns\n",
    "from pandas import to_datetime\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "def rename_column(df, str_column_name, str_new_name):\n",
    "    time_periods = ['1W', '1M', '1Q', '1Y', '2Y', '5Y', '10Y', '15Y', '20Y']\n",
    "    \n",
    "    # Match suffix and assign new name accordingly\n",
    "    for i in range(1, 9):\n",
    "        if f'.{i}' in str_column_name:\n",
    "            new_col_name = str_new_name + '_' + time_periods[i]\n",
    "            df.rename(columns={str_column_name: new_col_name}, inplace=True)\n",
    "            return df\n",
    "            \n",
    "\n",
    "    # If no .1 to .8 is found, assume it's the first (base) column\n",
    "    df.rename(columns={str_column_name: str_new_name + '_' + time_periods[0]}, inplace=True)\n",
    "    return df\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# function for calling the rename functions across all the swaps\n",
    "def call_rename(df, str_swap):\n",
    "    list_space = ['' , 1,2,3,4,5,6,7,8,9]\n",
    "    for i in range(9):\n",
    "        if i==0:\n",
    "            rename_column(df, str_swap+' Curncy', str_swap)\n",
    "            continue\n",
    "        else:\n",
    "            rename_column(df, f'{str_swap} Curncy.{i}', str_swap)\n",
    "         \n",
    "    return df\n",
    "\n",
    "\n",
    "def rename_column_dates(df, str_column_name, str_new_name):\n",
    "    time_periods = ['1W', '1M', '1Q', '1Y', '2Y', '5Y', '10Y', '15Y', '20Y']\n",
    "    \n",
    "    # Match suffix and assign new name accordingly\n",
    "    for i in range(1, 9):\n",
    "        if f'.{i}' in str_column_name:\n",
    "            new_col_name = str_new_name + '_' + 'dates_'+time_periods[i]\n",
    "            df.rename(columns={str_column_name: new_col_name}, inplace=True)\n",
    "            \n",
    "        else: #renaming the first column as it is recognized as a float, rather #than a string\n",
    "            df.columns.values[0] = str_new_name + '_dates_' + time_periods[0]\n",
    "    return df\n",
    "\n",
    "def call_rename_dates(df, str_new_name):\n",
    "    for i in range(1, 9):#since the end of the range is exclusive, we start from 1 and end at 9 to include the index 8\n",
    "        rename_column_dates(df, f'nan.{i}', str_new_name)\n",
    "    return df\n",
    "\n",
    "split_dataframes = {}\n",
    "def split_columns1(df):\n",
    "    \n",
    "    for i in range(0, len(df.columns), 2):\n",
    "        date_col = df.columns[i]\n",
    "        value_col = df.columns[i + 1]\n",
    "        # Extract swap and period from value_col, e.g. 'USDJPY_1W'\n",
    "        try:\n",
    "            parts = value_col.split('_')\n",
    "            swap = parts[0]\n",
    "            period = parts[-1]\n",
    "            key = f'{swap}_{period}'\n",
    "            split_dataframes[key] = df[[date_col, value_col]].copy()\n",
    "        except Exception:\n",
    "            continue\n",
    "    return split_dataframes\n",
    "\n",
    "#using this same implementation for all the other datafreames enclosed wihtin a function\n",
    "def clean_dataframes_to_date_time_and_numeric(df):\n",
    "    for column in df.columns:\n",
    "        if 'dates' in column:\n",
    "            df[column] = pd.to_datetime(df[column], errors='coerce')\n",
    "        else:\n",
    "            df[column] = pd.to_numeric(df[column], errors='coerce')\n",
    "\n",
    "    return df\n",
    "\n",
    "#adding a month year column to each dataframe\n",
    "def add_month_year_column(df):\n",
    "    for column in df.columns:\n",
    "        if 'dates' in column.lower():\n",
    "            df['month'] = df[column].dt.month\n",
    "            df['year'] = df[column].dt.year\n",
    "            df['month-year'] = df[column].dt.to_period('M')\n",
    "    df.drop(columns=['month', 'year'], inplace=True)  # Optionally drop month and year columns if not needed\n",
    "    return df\n",
    "\n",
    "def group_by_month_year_mean(df):\n",
    "    # Group by 'month-year' and calculate the mean for each group\n",
    "    grouped_df = df.groupby('month-year').mean().reset_index()\n",
    "    for column in grouped_df.columns:\n",
    "        if 'dates' in column.lower():\n",
    "            grouped_df.drop(columns=column, inplace=True)  # Drop date columns if they exist\n",
    "\n",
    "    return grouped_df\n",
    "# merging the grouped dataframes into a single dataframe\n",
    "def merge_grouped_dataframes(dfs):\n",
    "    merged_df = pd.DataFrame()\n",
    "    for df in dfs:\n",
    "        if merged_df.empty:\n",
    "            merged_df = df\n",
    "        else:\n",
    "            merged_df = pd.merge(merged_df, df, on='month-year', how='outer')\n",
    "    merged_df.dropna(inplace=True)  # Drop rows with any NaN values after merging\n",
    "    merged_df.reset_index(drop=True, inplace=True)  # Reset the index after merging\n",
    "    #adding  a base currency column of USD\n",
    "    merged_df['USD_base'] = [1 for i in range(len(merged_df))]\n",
    "    return merged_df\n",
    "\n",
    "# correlation analysis\n",
    "# step 1 calculate the log returns for each currency based ont the merged dataframe since daily data may be too much noise\n",
    "def calculate_log_returns(df):\n",
    "    for column in df.columns:\n",
    "        if df[column].dtype == float:  # detects if the column is numeric, which means the price\n",
    "            df['log_returns' + \"_\"+column] = np.log(df[column] / df[column].shift(1))\n",
    "            df.dropna(inplace=True)  # Drop rows with any NaN values after calculating log returns\n",
    "            df.reset_index(drop=True, inplace=True)  # Reset the index after calculating log returns\n",
    "    return df\n",
    "log_columns = []\n",
    "\n",
    "def plot_log_returns(df):\n",
    "    #change the 'month-year' column to datetime format for better plotting from period format\n",
    "\n",
    "    \n",
    "    \n",
    "    plt.figure(figsize=(12, 6))\n",
    "    for column in df.columns:\n",
    "        if 'log_returns' in column:\n",
    "            log_columns.append(column)\n",
    "            plt.plot(df['month-year'], df[column], label=column)\n",
    "    return log_columns\n",
    "\n",
    "\n",
    "def plot_currency_log_returns(df, currency_cols, date_col='date', log_y=False):\n",
    "    \"\"\"\n",
    "    Plots time series of log returns for each currency in separate subplots.\n",
    "\n",
    "    Parameters:\n",
    "        df (DataFrame): Your DataFrame with log returns.\n",
    "        currency_cols (list): List of column names for currency log returns.\n",
    "        date_col (str): Name of the column with date/time.\n",
    "        log_y (bool): If True, sets y-axis to logarithmic scale.\n",
    "    \"\"\"\n",
    "    n = len(currency_cols)\n",
    "    fig, axs = plt.subplots(n, 1, figsize=(12, 2.5 * n), sharex=True)\n",
    "\n",
    "    for i, currency in enumerate(currency_cols):\n",
    "        axs[i].plot(df['month-year'], df[currency], label=currency)\n",
    "        axs[i].set_title(f'{currency} Log Returns Over Time')\n",
    "        axs[i].set_ylabel('Log Return')\n",
    "        axs[i].grid(True)\n",
    "        if log_y:\n",
    "            axs[i].set_yscale('symlog')\n",
    "\n",
    "    axs[-1].set_xlabel('Date')\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d48c6756",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c41705ba",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b58d8d45",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4fe352aa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
